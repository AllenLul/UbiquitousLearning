<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="just.learn.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="just.learn.entity.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="CHAR" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="department" property="department" jdbcType="CHAR" />
    <result column="phone" property="phone" jdbcType="CHAR" />
    <result column="headPic" property="headpic" jdbcType="VARCHAR" />
    <result column="number" property="number" jdbcType="VARCHAR" />
    <result column="gender" property="gender" jdbcType="CHAR" />
    <result column="note" property="note" jdbcType="VARCHAR" />
    <result column="role" property="role" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, name, nickname, department, phone, headPic, number, gender, note, role, password
  </sql>
  <select id="getUsersByCourseId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    SELECT* FROM USER WHERE user.id IN
    (
    SELECT DISTINCT
    user_course.user_id
    FROM
    user_course,
    course
    WHERE course.id = user_course.course_id
    AND course.id = #{id}
    )
  </select>

  <select id="selectByNumberAndPassword" resultMap="BaseResultMap"  >
    select
    <include refid="Base_Column_List" />
    from user
    where number = #{0} AND password=#{1}
  </select>
  <select id="selectByNumber" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from user
    where number = #{number}
  </select>
  <select id="selectLimitObjects" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user
    LIMIT #{startRow} , #{pageSize}
  </select>
  <select id="countByCondition" resultType="java.lang.Integer">
    select
    COUNT(*)
    from user
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="just.learn.entity.User" >
    insert into user (id, name, nickname, 
      department, phone, headPic, 
      number, gender, note, 
      role, password)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=CHAR}, #{nickname,jdbcType=VARCHAR}, 
      #{department,jdbcType=CHAR}, #{phone,jdbcType=CHAR}, #{headpic,jdbcType=VARCHAR}, 
      #{number,jdbcType=VARCHAR}, #{gender,jdbcType=CHAR}, #{note,jdbcType=VARCHAR}, 
      #{role,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="just.learn.entity.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="nickname != null" >
        nickname,
      </if>
      <if test="department != null" >
        department,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="headpic != null" >
        headPic,
      </if>
      <if test="number != null" >
        number,
      </if>
      <if test="gender != null" >
        gender,
      </if>
      <if test="note != null" >
        note,
      </if>
      <if test="role != null" >
        role,
      </if>
      <if test="password != null" >
        password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=CHAR},
      </if>
      <if test="nickname != null" >
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="department != null" >
        #{department,jdbcType=CHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=CHAR},
      </if>
      <if test="headpic != null" >
        #{headpic,jdbcType=VARCHAR},
      </if>
      <if test="number != null" >
        #{number,jdbcType=VARCHAR},
      </if>
      <if test="gender != null" >
        #{gender,jdbcType=CHAR},
      </if>
      <if test="note != null" >
        #{note,jdbcType=VARCHAR},
      </if>
      <if test="role != null" >
        #{role,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="just.learn.entity.User" >
    update user
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=CHAR},
      </if>
      <if test="nickname != null" >
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="department != null" >
        department = #{department,jdbcType=CHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=CHAR},
      </if>
      <if test="headpic != null" >
        headPic = #{headpic,jdbcType=VARCHAR},
      </if>
      <if test="number != null" >
        number = #{number,jdbcType=VARCHAR},
      </if>
      <if test="gender != null" >
        gender = #{gender,jdbcType=CHAR},
      </if>
      <if test="note != null" >
        note = #{note,jdbcType=VARCHAR},
      </if>
      <if test="role != null" >
        role = #{role,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="just.learn.entity.User" >
    update user
    set name = #{name,jdbcType=CHAR},
      nickname = #{nickname,jdbcType=VARCHAR},
      department = #{department,jdbcType=CHAR},
      phone = #{phone,jdbcType=CHAR},
      headPic = #{headpic,jdbcType=VARCHAR},
      number = #{number,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=CHAR},
      note = #{note,jdbcType=VARCHAR},
      role = #{role,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>